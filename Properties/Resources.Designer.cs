//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated manually as a workaround.
//     Runtime Version:4.0.30319.42000
// </auto-generated>
//------------------------------------------------------------------------------

namespace KenshiModManager.Properties {
    using System;


    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("KenshiModManager.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }

        // Dynamic property access using ResourceManager
        private static string GetString(string name) {
            return ResourceManager.GetString(name, resourceCulture) ?? string.Empty;
        }

        // MainWindow resources
        public static string MainWindow_Title => GetString("MainWindow.Title");
        public static string MainWindow_Playset => GetString("MainWindow.Playset");
        public static string MainWindow_NewPlayset => GetString("MainWindow.NewPlayset");
        public static string MainWindow_PathLabel => GetString("MainWindow.Path");
        public static string MainWindow_ModsLabel => GetString("MainWindow.Mods");
        public static string MainWindow_RefreshButton => GetString("MainWindow.Refresh");
        public static string MainWindow_LaunchButton => GetString("MainWindow.Launch");
        public static string MainWindow_TabMods => GetString("Tab.ModManager");
        public static string MainWindow_TabTranslator => GetString("Tab.Translator");
        public static string MainWindow_TabValidator => GetString("Tab.Validator");
        public static string MainWindow_TabSettings => GetString("Tab.Settings");
        public static string MainWindow_TranslatorPlaceholder => GetString("Tab.Translator");
        public static string MainWindow_ValidatorPlaceholder => GetString("Tab.Validator");

        // Playset menu resources
        public static string Playset_MenuDuplicate => GetString("PlaysetMenu.Duplicate");
        public static string Playset_MenuRename => GetString("PlaysetMenu.Rename");
        public static string Playset_MenuExport => GetString("PlaysetMenu.Share");
        public static string Playset_MenuDelete => GetString("PlaysetMenu.Delete");
        public static string Playset_Import => GetString("MainWindow.Import");

        // ModsTab resources
        public static string ModsTab_Header => GetString("ModsTab.Title");
        public static string ModsTab_AuthorLabel => GetString("ModsTab.Author");
        public static string ModsTab_RemoveTooltip => GetString("ModsTab.RemoveTooltip");
        public static string ModsTab_OpenInWorkshop => GetString("ModsTab.OpenWorkshop");
        public static string ModsTab_ShowInFolder => GetString("ModsTab.ShowInFolder");
        public static string ModsTab_DragToReorder => GetString("ModsTab.DragToReorder");
        public static string ModsTab_ClickForOptions => GetString("ModsTab.ClickForOptions");
        public static string ModsTab_AddModsButton => GetString("ModsTab.AddMods");
        public static string ModsTab_RefreshButton => GetString("ModsTab.Refresh");
        public static string ModsTab_LoadingMods => GetString("ModsTab.Loading");

        // SettingsTab resources
        public static string SettingsTab_Title => GetString("SettingsTab.Title");
        public static string SettingsTab_KenshiInstallation => GetString("SettingsTab.KenshiInstallation");
        public static string SettingsTab_ModsFolder => GetString("SettingsTab.ModsFolder");
        public static string SettingsTab_WorkshopFolder => GetString("SettingsTab.WorkshopFolder");
        public static string SettingsTab_Browse => GetString("SettingsTab.Browse");
        public static string SettingsTab_ResetToAutoDetect => GetString("SettingsTab.ResetToAutoDetect");
        public static string SettingsTab_SaveSettings => GetString("SettingsTab.SaveSettings");
        public static string SettingsTab_Language => GetString("SettingsTab.Language");

        // AddModsWindow resources
        public static string AddModsWindow_Title => GetString("AddModsWindow.Title");
        public static string AddModsWindow_Header => GetString("AddModsWindow.Header");
        public static string AddModsWindow_Description => GetString("AddModsWindow.Description");
        public static string AddModsWindow_SortByName => GetString("AddModsWindow.SortByName");
        public static string AddModsWindow_SortByAuthor => GetString("AddModsWindow.SortByAuthor");
        public static string AddModsWindow_SortBySize => GetString("AddModsWindow.SortBySize");
        public static string AddModsWindow_SortByDate => GetString("AddModsWindow.SortByDate");
        public static string AddModsWindow_SelectAll => GetString("AddModsWindow.SelectAll");
        public static string AddModsWindow_DeselectAll => GetString("AddModsWindow.DeselectAll");
        public static string AddModsWindow_LoadingMods => GetString("AddModsWindow.Loading");
        public static string AddModsWindow_SelectedCount => GetString("AddModsWindow.SelectedCount");
        public static string AddModsWindow_Cancel => GetString("AddModsWindow.Cancel");
        public static string AddModsWindow_AddToPlayset => GetString("AddModsWindow.AddToPlayset");

        // InputDialog resources
        public static string InputDialog_Title => GetString("InputDialog.Title");
        public static string InputDialog_Cancel => GetString("InputDialog.Cancel");
        public static string InputDialog_OK => GetString("InputDialog.OK");

        // Status messages
        public static string Status_Ready => GetString("Status.Ready");
        public static string Status_PreparingLaunch => GetString("Status.PreparingLaunch");
        public static string Status_Launching => GetString("Status.Launching");
        public static string Status_GameRunning => GetString("Status.GameRunning");
        public static string Status_LaunchFailed => GetString("Status.LaunchFailed");
        public static string Status_LaunchError => GetString("Status.LaunchError");
        public static string Status_RefreshingMods => GetString("Status.RefreshingMods");
        public static string Status_ModsLoaded => GetString("Status.ModsLoaded");
        public static string Status_RefreshError => GetString("Status.RefreshError");
        public static string Status_GameClosed => GetString("Status.GameClosed");
        public static string Status_PlaysetCreated => GetString("Status.PlaysetCreated");
        public static string Status_PlaysetCreateError => GetString("Status.PlaysetCreateError");
        public static string Status_NameUnchanged => GetString("Status.NameUnchanged");
        public static string Status_PlaysetRenamed => GetString("Status.PlaysetRenamed");
        public static string Status_RenameFailedNameExists => GetString("Status.RenameFailedNameExists");
        public static string Status_RenameError => GetString("Status.RenameError");
        public static string Status_PlaysetDuplicated => GetString("Status.PlaysetDuplicated");
        public static string Status_DuplicateError => GetString("Status.DuplicateError");
        public static string Status_PlaysetDeleted => GetString("Status.PlaysetDeleted");
        public static string Status_DeleteFailed => GetString("Status.DeleteFailed");
        public static string Status_DeleteError => GetString("Status.DeleteError");
        public static string Status_PlaysetExported => GetString("Status.PlaysetExported");
        public static string Status_ExportError => GetString("Status.ExportError");
        public static string Status_PlaysetImported => GetString("Status.PlaysetImported");
        public static string Status_ImportError => GetString("Status.ImportError");
        public static string Status_LoadingPlayset => GetString("Status.LoadingPlayset");
        public static string Status_PlaysetLoaded => GetString("Status.PlaysetLoaded");
        public static string Status_LoadPlaysetError => GetString("Status.LoadPlaysetError");

        // Warning resources
        public static string Warning_AutoDetectFailed => GetString("Warning.AutoDetectFailed");
        public static string Warning_NoModsDetected => GetString("Warning.NoModsDetected");

        // Dialog resources
        public static string Dialog_ConfirmDelete => GetString("Dialog.ConfirmDelete");
        public static string Dialog_RenamePlayset => GetString("Dialog.RenamePlayset");
        public static string Dialog_EnterPlaysetName => GetString("Dialog.EnterPlaysetName");
        public static string Dialog_ExportPlayset => GetString("Dialog.ExportPlayset");
        public static string Dialog_ImportPlayset => GetString("Dialog.ImportPlayset");
        public static string DeleteConfirm_ActivePlayset => GetString("DeleteConfirm.ActivePlayset");
        public static string DeleteConfirm_InactivePlayset => GetString("DeleteConfirm.InactivePlayset");

        // FileDialog resources
        public static string FileDialog_ConfigFilter => GetString("FileDialog.ConfigFilter");
        public static string FileDialog_SelectKenshiExe => GetString("FileDialog.SelectKenshiExe");
        public static string FileDialog_SelectModsFolder => GetString("FileDialog.SelectModsFolder");
        public static string FileDialog_SelectWorkshopFolder => GetString("FileDialog.SelectWorkshopFolder");

        // SettingsValidation resources
        public static string SettingsValidation_KenshiValid => GetString("SettingsValidation.KenshiValid");
        public static string SettingsValidation_PathNotSet => GetString("SettingsValidation.PathNotSet");
        public static string SettingsValidation_KenshiInvalid => GetString("SettingsValidation.KenshiInvalid");
        public static string SettingsValidation_ModsValid => GetString("SettingsValidation.ModsValid");
        public static string SettingsValidation_ModsValidNoMods => GetString("SettingsValidation.ModsValidNoMods");
        public static string SettingsValidation_FolderNotExists => GetString("SettingsValidation.FolderNotExists");
    }
}
